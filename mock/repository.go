// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	v9 "github.com/go-pg/pg/v9"
	gomock "github.com/golang/mock/gomock"
	model "github.com/tsovak/rest-api-demo/api/model"
	reflect "reflect"
)

// MockAccountRepository is a mock of AccountRepository interface
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockAccountRepository) GetAll(ctx context.Context) ([]model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockAccountRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccountRepository)(nil).GetAll), ctx)
}

// Save mocks base method
func (m *MockAccountRepository) Save(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountRepositoryMockRecorder) Save(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountRepository)(nil).Save), ctx, account)
}

// FindById mocks base method
func (m *MockAccountRepository) FindById(ctx context.Context, id string) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockAccountRepositoryMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockAccountRepository)(nil).FindById), ctx, id)
}

// DeleteById mocks base method
func (m *MockAccountRepository) DeleteById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById
func (mr *MockAccountRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockAccountRepository)(nil).DeleteById), ctx, id)
}

// Update mocks base method
func (m *MockAccountRepository) Update(ctx context.Context, account *model.Account, fn func(*v9.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAccountRepositoryMockRecorder) Update(ctx, account, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountRepository)(nil).Update), ctx, account, fn)
}

// MockPaymentRepository is a mock of PaymentRepository interface
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockPaymentRepository) GetAll(ctx context.Context) ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPaymentRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPaymentRepository)(nil).GetAll), ctx)
}

// Save mocks base method
func (m *MockPaymentRepository) Save(ctx context.Context, payment ...*model.Payment) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range payment {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockPaymentRepositoryMockRecorder) Save(ctx interface{}, payment ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, payment...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPaymentRepository)(nil).Save), varargs...)
}

// FindById mocks base method
func (m *MockPaymentRepository) FindById(ctx context.Context, id string) (model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockPaymentRepositoryMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockPaymentRepository)(nil).FindById), ctx, id)
}

// GetPaymentsByAccountId mocks base method
func (m *MockPaymentRepository) GetPaymentsByAccountId(ctx context.Context, accountId string) ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByAccountId", ctx, accountId)
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByAccountId indicates an expected call of GetPaymentsByAccountId
func (mr *MockPaymentRepositoryMockRecorder) GetPaymentsByAccountId(ctx, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByAccountId", reflect.TypeOf((*MockPaymentRepository)(nil).GetPaymentsByAccountId), ctx, accountId)
}

// GetSaveTransaction mocks base method
func (m *MockPaymentRepository) GetSaveTransaction(ctx context.Context, payments ...*model.Payment) func(*v9.Tx) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range payments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSaveTransaction", varargs...)
	ret0, _ := ret[0].(func(*v9.Tx) error)
	return ret0
}

// GetSaveTransaction indicates an expected call of GetSaveTransaction
func (mr *MockPaymentRepositoryMockRecorder) GetSaveTransaction(ctx interface{}, payments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, payments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaveTransaction", reflect.TypeOf((*MockPaymentRepository)(nil).GetSaveTransaction), varargs...)
}
