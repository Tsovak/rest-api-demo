// Code generated by MockGen. DO NOT EDIT.
// Source: payment_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	v9 "github.com/go-pg/pg/v9"
	gomock "github.com/golang/mock/gomock"
	model "github.com/tsovak/rest-api-demo/api/model"
	reflect "reflect"
)

// MockPaymentManager is a mock of PaymentManager interface
type MockPaymentManager struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentManagerMockRecorder
}

// MockPaymentManagerMockRecorder is the mock recorder for MockPaymentManager
type MockPaymentManagerMockRecorder struct {
	mock *MockPaymentManager
}

// NewMockPaymentManager creates a new mock instance
func NewMockPaymentManager(ctrl *gomock.Controller) *MockPaymentManager {
	mock := &MockPaymentManager{ctrl: ctrl}
	mock.recorder = &MockPaymentManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentManager) EXPECT() *MockPaymentManagerMockRecorder {
	return m.recorder
}

// GetAccountPayments mocks base method
func (m *MockPaymentManager) GetAccountPayments(ctx context.Context) ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountPayments", ctx)
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountPayments indicates an expected call of GetAccountPayments
func (mr *MockPaymentManagerMockRecorder) GetAccountPayments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountPayments", reflect.TypeOf((*MockPaymentManager)(nil).GetAccountPayments), ctx)
}

// CreatePayments mocks base method
func (m *MockPaymentManager) CreatePayments(ctx context.Context, payments ...*model.Payment) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range payments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePayments", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayments indicates an expected call of CreatePayments
func (mr *MockPaymentManagerMockRecorder) CreatePayments(ctx interface{}, payments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, payments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayments", reflect.TypeOf((*MockPaymentManager)(nil).CreatePayments), varargs...)
}

// GetPaymentsByAccountID mocks base method
func (m *MockPaymentManager) GetPaymentsByAccountID(ctx context.Context, id string) ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByAccountID", ctx, id)
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByAccountID indicates an expected call of GetPaymentsByAccountID
func (mr *MockPaymentManagerMockRecorder) GetPaymentsByAccountId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByAccountID", reflect.TypeOf((*MockPaymentManager)(nil).GetPaymentsByAccountID), ctx, id)
}

// GetSaveTransaction mocks base method
func (m *MockPaymentManager) GetSaveTransaction(ctx context.Context, payments ...*model.Payment) func(*v9.Tx) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range payments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSaveTransaction", varargs...)
	ret0, _ := ret[0].(func(*v9.Tx) error)
	return ret0
}

// GetSaveTransaction indicates an expected call of GetSaveTransaction
func (mr *MockPaymentManagerMockRecorder) GetSaveTransaction(ctx interface{}, payments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, payments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaveTransaction", reflect.TypeOf((*MockPaymentManager)(nil).GetSaveTransaction), varargs...)
}
