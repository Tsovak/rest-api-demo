// Code generated by MockGen. DO NOT EDIT.
// Source: account_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	v9 "github.com/go-pg/pg/v9"
	gomock "github.com/golang/mock/gomock"
	model "github.com/tsovak/rest-api-demo/api/model"
	reflect "reflect"
)

// MockAccountManager is a mock of AccountManager interface
type MockAccountManager struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagerMockRecorder
}

// MockAccountManagerMockRecorder is the mock recorder for MockAccountManager
type MockAccountManagerMockRecorder struct {
	mock *MockAccountManager
}

// NewMockAccountManager creates a new mock instance
func NewMockAccountManager(ctrl *gomock.Controller) *MockAccountManager {
	mock := &MockAccountManager{ctrl: ctrl}
	mock.recorder = &MockAccountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountManager) EXPECT() *MockAccountManagerMockRecorder {
	return m.recorder
}

// GetAllAccounts mocks base method
func (m *MockAccountManager) GetAllAccounts(ctx context.Context) ([]model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", ctx)
	ret0, _ := ret[0].([]model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts
func (mr *MockAccountManagerMockRecorder) GetAllAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockAccountManager)(nil).GetAllAccounts), ctx)
}

// Save mocks base method
func (m *MockAccountManager) Save(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountManagerMockRecorder) Save(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountManager)(nil).Save), ctx, account)
}

// FindByID mocks base method
func (m *MockAccountManager) FindByID(ctx context.Context, id string) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockAccountManagerMockRecorder) FindById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAccountManager)(nil).FindByID), ctx, id)
}

// DeleteByID mocks base method
func (m *MockAccountManager) DeleteByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockAccountManagerMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockAccountManager)(nil).DeleteByID), ctx, id)
}

// Update mocks base method
func (m *MockAccountManager) Update(ctx context.Context, account *model.Account, fn func(*v9.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAccountManagerMockRecorder) Update(ctx, account, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountManager)(nil).Update), ctx, account, fn)
}
